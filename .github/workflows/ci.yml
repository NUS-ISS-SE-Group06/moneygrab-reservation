name: CI - Java Test and Build

on:
  push:
    branches:
      - '**'
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/**'
      - 'deployment/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/**'
      - 'deployment/**'
  workflow_dispatch:

jobs:
  test_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Project
        run: mvn -B clean package -DskipTests

  unit_test:
    name: Unit Test
    needs: test_build
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: testpass
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Unit Test
        run: mvn -B test

  newman_test:
    name: Newman API Tests
    needs: unit_test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: reservationdb
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/reservationdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create DB schema and insert initial data
        run: |
          echo "‚è≥ Waiting for MySQL to be ready before initializing DB..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "‚è≥ ($i) Waiting for MySQL..."
            sleep 2
          done

          if ! mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; then
            echo "‚ùå MySQL did not become ready. Exiting."
            exit 1
          fi

          echo "üöÄ Creating schema from reservation_schema.sql..."
          mysql -h 127.0.0.1 -uroot -proot reservationdb < ./resources/dbscript/reservation_schema.sql

          echo "üì¶ Inserting initial data from reservation_data.sql..."
          mysql --show-warnings --verbose --force -h 127.0.0.1 -uroot -proot reservationdb < ./resources/dbscript/reservation_data.sql

      - name: Build Spring Boot Project
        run: mvn clean package -DskipTests

      - name: Start Spring Boot App
        run: |
          echo "Starting Spring Boot app on port 8688..."
          java -jar target/*.jar --server.port=8688 > app.log 2>&1 &

          echo "Waiting for app to respond on http://localhost:8688/api/v1/transactions..."
          for i in {1..60}; do
            if curl -s --head http://localhost:8688/api/v1/transactions | grep "200 OK" > /dev/null; then
              echo "‚úÖ App is responding!"
              break
            fi
            echo "‚è≥ ($i) Waiting for HTTP 200 OK..."
            sleep 2
          done

          if ! curl -s --head http://localhost:8688/api/v1/transactions | grep "200 OK" > /dev/null; then
            echo "‚ùå App failed to respond in time. Dumping logs:"
            cat app.log
            exit 1
          fi

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman Tests with Newman
        run: |
          echo "üß™ Running Postman tests..."
          ls -la postman
          cat postman/moneygrab.postman_collection.json | head -n 20 || echo "‚ùå Collection missing or unreadable"
          newman run postman/moneygrab.postman_collection.json \
            --environment postman/moneygrab.environment.json \
            --reporters cli,json \
            --reporter-json-export newman-report.json \
            --verbose || {
              echo "‚ùå Newman test failed"
              exit 1
            }

      - name: Upload Newman Report
        uses: actions/upload-artifact@v4
        with:
          name: newman-report
          path: newman-report.json

      - name: Upload Spring Boot Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-log
          path: app.log

  code_scan:
    name: Code Quality Scan
    needs: newman_test
    runs-on: ubuntu-latest

    steps:
      - name: SonarCloud Analysis
        run: |
          echo "Automatic Analysis result: https://sonarcloud.io/project/overview?id=NUS-ISS-SE-Group06_moneygrab-reservation"
